// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CalculatorSumService_CalculatorSum_FullMethodName = "/calculator.CalculatorSumService/CalculatorSum"
)

// CalculatorSumServiceClient is the client API for CalculatorSumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorSumServiceClient interface {
	CalculatorSum(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (*CalculatorResponse, error)
}

type calculatorSumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorSumServiceClient(cc grpc.ClientConnInterface) CalculatorSumServiceClient {
	return &calculatorSumServiceClient{cc}
}

func (c *calculatorSumServiceClient) CalculatorSum(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (*CalculatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculatorResponse)
	err := c.cc.Invoke(ctx, CalculatorSumService_CalculatorSum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorSumServiceServer is the server API for CalculatorSumService service.
// All implementations must embed UnimplementedCalculatorSumServiceServer
// for forward compatibility
type CalculatorSumServiceServer interface {
	CalculatorSum(context.Context, *CalculatorRequest) (*CalculatorResponse, error)
	mustEmbedUnimplementedCalculatorSumServiceServer()
}

// UnimplementedCalculatorSumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorSumServiceServer struct {
}

func (UnimplementedCalculatorSumServiceServer) CalculatorSum(context.Context, *CalculatorRequest) (*CalculatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatorSum not implemented")
}
func (UnimplementedCalculatorSumServiceServer) mustEmbedUnimplementedCalculatorSumServiceServer() {}

// UnsafeCalculatorSumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorSumServiceServer will
// result in compilation errors.
type UnsafeCalculatorSumServiceServer interface {
	mustEmbedUnimplementedCalculatorSumServiceServer()
}

func RegisterCalculatorSumServiceServer(s grpc.ServiceRegistrar, srv CalculatorSumServiceServer) {
	s.RegisterService(&CalculatorSumService_ServiceDesc, srv)
}

func _CalculatorSumService_CalculatorSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorSumServiceServer).CalculatorSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalculatorSumService_CalculatorSum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorSumServiceServer).CalculatorSum(ctx, req.(*CalculatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalculatorSumService_ServiceDesc is the grpc.ServiceDesc for CalculatorSumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorSumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorSumService",
	HandlerType: (*CalculatorSumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculatorSum",
			Handler:    _CalculatorSumService_CalculatorSum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}
